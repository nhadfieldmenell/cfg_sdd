/*
SddNode* delta = sdd_manager_false(m);
SddNode* alpha;
int i,j;
///*
for(i = 1; i < 11; i++) {
	alpha = sdd_manager_true(m);
	for(j = 1; j < 11; j++){
		if (j == i){
			alpha = sdd_conjoin(sdd_manager_literal(j,m),alpha,m);
		}
		else{
			alpha = sdd_conjoin(sdd_manager_literal(-j,m),alpha,m);
		}
	}
	delta = sdd_disjoin(alpha,delta,m);
}
*/


// output: SDD that is valid when exactly r out of n inputs are true
SddNode* combinations(int start, int n, int r, int index, int *indices, SddManager* m){  //call with start == 1, index == 0
	SddNode* alpha;
	int i,j;
	if (index == r){
		alpha = sdd_manager_true(m);
		int theIndex = 0;
		int makeTrue = indices[0];
		for (i = 1; i <= n; i++){
			if (i == makeTrue){
				alpha = sdd_conjoin(sdd_manager_literal(i,m),alpha,m);
				theIndex++;
				makeTrue = indices[theIndex];
			}
			else{
				alpha = sdd_conjoin(sdd_manager_literal(-i,m),alpha,m);
			}
		}
		
		/*
		for (j = 0; j < r; j++){
			printf("%d ",indices[j]);
		}
		printf("\n");
		*/
		
		return alpha;
	}
	
	alpha = sdd_manager_false(m);
	
	for(i = start; i <= n && n - i + 1 >= r - index; i++){
		indices[index] = i;
		alpha = sdd_disjoin(alpha,combinations(i+1,n,r,index+1,indices,m),m);
	}
	return alpha;
}


// inputs: manager m, ints r & n
// output: an SDD that is true when exactly r out of n variables are true
SddNode* rInN(SddManager* m, int n, int r){
	SddNode* delta;
	int *indices = malloc(sizeof(int) * r);
	
	delta = combinations(1,n,r,0,indices,m);
	free(indices);
	return delta;
}



//this stuff below is broken (next 2 fns)

//never call with r > n
SddNode* rnDynamic(SddManager* m, int r, int n, SddNode* dyArr[r+1][n+1]){
	SddNode* toReturn = sdd_manager_true(m);
	
	if (n == 1){
		if (r == 1){
			return sdd_conjoin(toReturn, sdd_manager_literal(1,m),m);
		}
		return sdd_conjoin(toReturn, sdd_manager_literal(-1,m),m);
	}
	
	if (r == 0){
		if (dyArr[0][n-1] != 0){
			return sdd_conjoin(sdd_manager_literal(-n,m),dyArr[0][n-1],m);
		}
		else{
			toReturn = rnDynamic(m,0,n-1,dyArr);
			dyArr[0][n-1] = toReturn;
			return sdd_conjoin(sdd_manager_literal(-n,m),toReturn,m);
		} 
	}
	
	if (r == n){
		if (dyArr[r-1][n-1] != 0){
			return sdd_conjoin(sdd_manager_literal(n,m),dyArr[r-1][n-1],m);
		}
		else{
			toReturn = rnDynamic(m,r-1,n-1,dyArr);
			dyArr[r-1][n-1] = toReturn;
			return sdd_conjoin(sdd_manager_literal(n,m),toReturn,m);
		}
	}
	SddNode* firstTerm;
	SddNode* secondTerm;
	if (dyArr[r-1][n-1] != 0){
		firstTerm = sdd_conjoin(sdd_manager_literal(n,m),dyArr[r-1][n-1],m);
	}
	else{
		toReturn = rnDynamic(m,r-1,n-1,dyArr);
		dyArr[r-1][n-1] = toReturn;
		firstTerm = sdd_conjoin(sdd_manager_literal(n,m),toReturn,m);
	}
	if (dyArr[r][n-1] != 0){
		secondTerm = sdd_conjoin(sdd_manager_literal(-n,m),dyArr[r][n-1],m);
	}
	else{
		toReturn = rnDynamic(m,r,n-1,dyArr);
		dyArr[r][n-1] = toReturn;
		secondTerm = sdd_conjoin(sdd_manager_literal(-n,m),toReturn,m);
	}
	return sdd_disjoin(firstTerm,secondTerm,m);
}

SddNode* rInN(SddManager* m, int r, int n){
	SddNode* dyArr[r+1][n+1];
	int i,j;
	for(i = 0;i <= r;i++){
		for(j = 0;j <= n;j++){
			dyArr[i][j] = 0;
		}
	}
	SddNode* toReturn = rnDynamic(m,r,n,dyArr);
	//free(dyArr);
	return toReturn;
}